import hashlib
from typing import Any, override

from minigrid.core.world_object import Door, Key
from minigrid.envs.doorkey import DoorKeyEnv


def observation_to_state(observation: dict[str, Any]) -> int:
    dir = observation["direction"]
    img = observation["image"].tolist()
    string = str(dir) + " " + str(img)
    hashed = hashlib.md5(string.encode("utf-8"))
    return int(hashed.hexdigest(), 16)


class RMDoorKey(DoorKeyEnv):
    def __init__(
        self, size: int = 5, max_steps: int | None = 250, **kwargs: Any
    ) -> None:
        super().__init__(size, max_steps, **kwargs)
        self.info: dict[str, bool] = dict()

    def door_is_open(self) -> bool:
        for x in range(self.grid.width):
            for y in range(self.grid.height):
                cell = self.grid.get(x, y)
                if isinstance(cell, Door):
                    return cell.is_open
        raise ValueError(
            "ERROR: Unreachable! Door should always be generated by DoorKeyEnv._gen_grid."
        )

    @override
    def reset(
        self, *, seed: int | None = None, options: dict[str, Any] | None = None
    ) -> tuple[int, dict[str, bool]]:
        obs, _ = super().reset(seed=seed, options=options)
        self.info = {
            "door": False,
            "key": False,
            "terminated": False,
            "truncated": False,
        }
        return observation_to_state(obs), self.info

    @override
    def step(self, action: int) -> tuple[int, float, bool, bool, dict[str, bool]]:
        obs, _, terminated, truncated, _ = super().step(action)
        reward = 1 if terminated else 0
        return (
            observation_to_state(obs),
            reward,
            terminated,
            truncated,
            self.get_events(terminated, truncated),
        )

    def get_events(self, terminated: bool, truncated: bool) -> dict[str, bool]:
        self.info["door"] = self.door_is_open()
        self.info["key"] = isinstance(self.carrying, Key)
        self.info["terminated"] = terminated
        self.info["truncated"] = truncated
        return self.info
